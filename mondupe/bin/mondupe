#!/usr/bin/env ruby

require 'mondupe'
require 'optparse'

$options = {}

ValidHostnameRegex=/(?![0-9]+$)(?!-)[a-zA-Z0-9-]{,63}(?<!-)/

opt_parser = OptionParser.new do |opt|
  opt.banner = "Usage: mondupe COMMAND [OPTIONS]"
  opt.separator ""
  opt.separator "Commands           Description"
  opt.separator "      create     - create new mongo host."
  opt.separator "                    Requires -n [name]"
  opt.separator "                    Optional -i [image] -e [expire_days] -o [owner] -t [type] -a [ipaddress] -s [size]"
  opt.separator "      delete     - delete existing mongo host."
  opt.separator "                    Requires -n [name] || -d [id]"
  opt.separator "      bootstrap  - push chef-client and configuration to the node."
  opt.separator "                    Requires -n [name] -a [ipaddress]"
  opt.separator "      dumps3     - retrieve the database dump from s3."
  opt.separator "                    Requires -n [name] -a [ipaddress]"
  opt.separator "      restore    - Restore a mongo dump that exists on a host"
  opt.separator "                    Requires -n [name] -a [ipaddress]"
  opt.separator "                    Optional -t [tmpdir] -u [mongo_username] -p [mongo_password] -c [mongo_authdb]"
  opt.separator "      expire     - (coming soon) Reset the expiration days of a node"
  opt.separator "                    Requires ( -n [name] || -d [id] || -a [ipaddress] ) -e [expire_days]"
  opt.separator "      list       - (coming soon) List all mongo hosts."
  opt.separator "      help       - Get help."
  opt.separator ""
  opt.separator "Options"

  opt.on("-n","--name HOSTNAME","Name of the host that you are creating") do |name|
    if ValidHostnameRegex.match(name)
      $options[:name] = name
    else
      abort("Invalid hostname")
    end
  end

  opt.on("-i","--image IMAGENAME","Name of the AWS Image you would like to use") do |image|
    $options[:image] = image
  end

  opt.on("-e","--expire DAYS","Number of days the instance should stay on line. - Default: 3") do |days|
    $options[:expire_days] = days
  end

  opt.on("-o","--owner NAME","Name of the owner of the host to be created. - Default: Your Username") do |owner|
    $options[:owner] = owner
  end

  opt.on("-t","--type INSTANCE_TYPE","Type of AWS host to create. - Default: m3.xlarge") do |type|
    $options[:type] = type
  end

  opt.on("-a","--ipaddress IPADDRESS","IP address of node that already exists. Not to be used with creating new nodes") do |address|
    $options[:ipaddress] = address
  end

  opt.on("-d","--id INSTANCE_ID","AWS ID of the instance, must exist already") do |id|
    $options[:id] = id
  end

  opt.on("-t","--tmpdir TEMP_DIR","Directory on remote host that will be used for downloading the mongo dump. - Default: /tmp") do |tmpdir|
    $options[:tmpdir] = tmpdir
  end

  opt.on("-s","--size VOLUME_SIZE","Set the root volume size in GB - Default: 60") do |size|
    $options[:size] = size
  end

  opt.on("-n","--mongodbname","Database name to restore to") do |mongo_db_name|
    $options[:mongo_db_name] = mongo_db_name
  end

  opt.on("-u","--mongouser","Username to authenticate to mongodb with") do |mongo_user|
    $options[:mongo_user] = mongo_user
  end

  opt.on("-p","--mongopass","Password to authenticate to mongodb with") do |mongo_pass|
    $options[:mongo_pass] = mongo_pass
  end

  opt.on("-c","--mongoauthdb","Database to authenticate against for mongo") do |mongo_auth_db|
    $options[:mongo_auth_db] = mongo_auth_db
  end

  opt.on("-h","--help","help") do
    puts opt_parser
  end

  opt.separator "Environment Variables - Set these in your environment. They should be self explanitory."
  opt.separator "  Required:"
  opt.separator "   - MONDUPE_ROUTE53_DOMAIN"
  opt.separator "   - MONDUPE_SECURITY_GROUP"
  opt.separator "   - MONDUPE_S3_BUCKET_NAME"
  opt.separator "   - MONDUPE_KEY_PAIR_NAME"
  opt.separator ""
  opt.separator "  Optional: (no default)"
  opt.separator "   - MONGO_USER"
  opt.separator "   - MONGO_PASS"
  opt.separator "   - MONGO_AUTH_DB"
  opt.separator ""
  opt.separator "  Optional: (have sane defaults)"
  opt.separator "   - MONDUPE_INSTANCE_IMAGE_ID"
  opt.separator "   - MONDUPE_CHEF_RUN_LIST"
  opt.separator "   - MONDUPE_CHEF_IDENTITY_FILE"
  opt.separator "   - MONDUPE_CHEF_ENVIRONMENT"
  opt.separator "   - MONDUPE_SSH_KEY"
  opt.separator "   - MONDUPE_SSH_USER"
  opt.separator "   - MONDUPE_DUMP_FILE_NAME"
  opt.separator ""
  opt.separator "  Optional as ENV Variable. Must be specified via command line or ENV. No default."
  opt.separator "   - MONGO_DB_NAME"
end

opt_parser.parse!

instance_image_id = $options[:image] || ENV['MONDUPE_INSTANCE_IMAGE_ID'] || "ami-018c9568"
instance_type = $options[:type] || "m3.xlarge"
instance_name = $options[:name] || nil
instance_owner = $options[:owner] || ENV['USER'] || 'mondupe'
instance_ipaddress = $options[:ipaddress] || nil
instance_id = $options[:id] || nil
dump_tmp_path = $options[:tmpdir] || '/tmp'
expire_days = $options[:expire_days] || 3
mongo_db_name = $options[:mongo_db_name] || ENV['MONGO_DB_NAME'] || nil
mongo_user = $options[:mongo_user] || ENV['MONGO_USER'] || nil
mongo_pass = $options[:mongo_pass] || ENV['MONGO_PASS'] || nil
mongo_auth_db = $options[:mongo_auth_db] || ENV['MONGO_AUTH_DB'] || nil
instance_count = 1
chef_run_list = ENV['MONDUPE_CHEF_RUN_LIST'] || ""
chef_environment = ENV['MONDUPE_CHEF_ENVIRONMENT'] || "default"
ssh_key = ENV['MONDUPE_SSH_KEY'] || "~/.ssh/id_rsa"
chef_identity_file = ENV['MONDUPE_CHEF_IDENTITY_FILE'] || ssh_key
ssh_user = ENV['MONDUPE_SSH_USER'] || "ubuntu"
route53_domain = ENV['MONDUPE_ROUTE53_DOMAIN'] || nil
instance_fqdn = ( instance_name + "." + route53_domain ) unless instance_name.nil? || route53_domain.nil?
key_pair_name = ENV['MONDUPE_KEY_PAIR_NAME'] || nil
security_group = ENV['MONDUPE_SECURITY_GROUP'] || nil
s3_bucket_name = ENV['MONDUPE_S3_BUCKET_NAME'] || nil
dump_file_name = ENV['MONDUPE_DUMP_FILE_NAME'] || 'mongodb.dump.tgz'
knife_exec = ENV['MONDUPE_KNIFE_EXEC'] || 'knife'
instance_volume_size = 60

case ARGV[0]
when "create"
  start_time = Time.now
  total_seconds = Time.now - start_time
  puts "Creating AWS EC2 Instance with MongoDB and restoring from latest production backup"
  instance = Mondupe.new.create_instance(instance_name, instance_image_id, instance_type, instance_count, security_group, key_pair_name, expire_days, instance_owner, instance_volume_size)
  Mondupe.new.create_dns(instance_fqdn, route53_domain, instance)
  Mondupe.new.bootstrap(instance_name, instance_fqdn, instance.ip_address, chef_environment, chef_identity_file, chef_run_list, ssh_user, knife_exec)
  Mondupe.new.get_db_dump_from_s3(instance.ip_address, s3_bucket_name, dump_tmp_path, ssh_user, dump_file_name)
  Mondupe.new.restore_db(instance.ip_address, dump_tmp_path, ssh_key, ssh_user, dump_file_name, mongo_db_name, mongo_user, mongo_pass, mongo_auth_db)
  puts " - - - Total Run Time: #{((total_seconds % 3600) / 60).to_i}m #{((total_seconds % 3600) % 60).to_i}s - - -"
when "delete"
  puts "delete mongo host"
when "bootstrap"
  puts "bootstrapping node"
  # Find the instance and create the instance object here
  Mondupe.new.bootstrap(instance_name, instance_fqdn, instance_ipaddress, chef_environment, chef_identity_file, chef_run_list, ssh_user, knife_exec)
when "dumps3"
  puts "getting dump"
  Mondupe.new.get_db_dump_from_s3(instance_ipaddress, s3_bucket_name, dump_tmp_path, ssh_user, dump_file_name)
when "restore"
  puts "Restoring mongo database from dump"
  Mondupe.new.restore_db(instance_ipaddress, dump_tmp_path, ssh_key, ssh_user, dump_file_name, mongo_db_name, mongo_user, mongo_pass, mongo_auth_db)
when "terminate"
  puts "Marking instance for termination"
  Mondupe.new.terminate_instance(instance_id)
when "list"
  puts "Listing all instances created by MonDupe"
  Mondupe.new.list_instances
when "expire"
  puts "Modifying expiration days for instance"
  Mondupe.new.instance_expire(instance_id, instance_name, expire_days)
else
  puts opt_parser
end
